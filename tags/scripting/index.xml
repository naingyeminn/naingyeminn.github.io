<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on Naing Ye` Minn</title>
    <link>http://naingyeminn.com/tags/scripting/</link>
    <description>Recent content in Scripting on Naing Ye` Minn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://naingyeminn.com/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Optimizing Ansible Playbooks: Delegation</title>
      <link>http://naingyeminn.com/posts/ansible-delegation/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://naingyeminn.com/posts/ansible-delegation/</guid>
      <description>ဒီတစ်ခါတော့ Ansible ကိုလေ့လာနေကြတဲ့သူတွေအတွက် ကောင်းမွန်တဲ့ Ansible Playbook တစ်ခုရဖို့ Optimize လုပ်တဲ့အခါ သိထားသင့်တဲ့ နည်းလမ်းလေးတွေကိုမျှဝေချင်ပါတယ်။ ပထမဦးဆုံးအနေနဲ့ သိစေချင်တဲ့အချက်ကတော့ Delegation ပဲဖြစ်ပါတယ်။ မြန်မာလိုဆီလျော်အောင်ပြောမယ်ဆိုရင်တော့ တာဝန်ပေးတယ်လို့ဆိုရပါလိမ့်မယ်။ Ansible Playbook ဆိုတာ တကယ်တော့ ဆောင်ရွက်စေချင်တဲ့ လုပ်ငန်းဆောင်တာ (Task) တွေကို အစီအစဉ်တကျ ရေးသားထားတဲ့ စာသားဖိုင် (Text File) လေးတွေပါ။ ဒီ Task တွေကို ဘယ် server၊ ဘယ် device မှာလုပ်ဆောင်ခိုင်းမယ်ဆိုတာကို hosts ဆိုတဲ့ keyword နဲ့ကြေငြာပေးရပါတယ်။ Playbook ရေးကြည့်ဖူးတဲ့သူတွေဆိုရင်သိပါလိမ့်မယ်။ ဥပမာအနေနဲ့ ဒီ Playbook ကိုကြည့်ကြည့်ပါ။
 play - one ဆိုတဲ့ Play တစ်ခုကနေ vm01.example.com ဆိုတဲ့ Host ပေါ်မှာ task တစ်ခု run ခိုင်းထားတာပါ။ အဓိကသတိထားမိစေချင်တာက myvar နဲ့ ansible_nodename ဆိုတဲ့ Variable တွေပဲဖြစ်ပါတယ်။ myvar ကတော့ play - one ဆိုတဲ့ play ရဲ့ variable ဖြစ်ပြီး ansible_nodename ကတော့ vm01.</description>
    </item>
    
    <item>
      <title>Managing RHEL5 with Ansible</title>
      <link>http://naingyeminn.com/posts/managing-rhel5-with-ansible/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://naingyeminn.com/posts/managing-rhel5-with-ansible/</guid>
      <description>လွန်ခဲ့တဲ့ တစ်ပတ်လောက်က မိတ်ဆွေအကိုတွေနဲ့အလုပ်ကိစ္စစကားထိုင်ပြောနေရင်း Ansible အကြောင်းရောက်သွားတယ်။ သူတို့ရုံးရဲ့ Server တွေကို Ansible နဲ့ စမ်းပြီး Manage လုပ်ကြည့်နေတာမှာ ကြုံရတဲ့ ပြဿနာတစ်ခုကိုပြောပြတယ်။ သုံးထားတဲ့ Server OS တွေက RHEL 5, 6, 7 အစုံဖြစ်နေတာကြောင့် Playbook တစ်ခုတည်းနဲ့ ပေါင်းပြီး run လိုက်တဲ့အခါကျ version အနိမ့်ဖြစ်တဲ့ RHEL 5 မှာအဆင်မပြေပဲ error တွေတက်တာပါ။ အဲ့ဒီတုန်းကတော့ connection type (Paramiko ကိုသုံးဖို့လိုတာ) ကြောင့်လို့ပဲထင်လိုက်မိတာ တကယ်တမ်းသေချာအောင် လိုက်ရှာဖတ်ကြည့်တော့မှ Ansible Version နဲ့ Managed Node ရဲ့ Python Version နဲ့မကိုက်တာကြောင့်မှန်းသိရတယ်။ အဲ့တော့ ဒီပြဿနာကိုဖြေရှင်းဖို့က နည်းလမ်း သုံးခုတော့ရှိပါတယ်။ (၁) Ansible Version အနိမ့်နဲ့ Manage လုပ်ရင်လုပ်၊ (၂) Managed Node ရဲ့ Python ကို Version မြှင့်ရင်မြှင့်၊ (၃) Ansible ရဲ့ Python မလိုတဲ့ RAW Module နဲ့ Script Module ကိုသုံးရင်သုံး၊ ဒီနည်းလမ်းတွေနဲ့ဖြေရှင်းလို့ရပါတယ်။</description>
    </item>
    
    <item>
      <title>Scripting on Windows</title>
      <link>http://naingyeminn.com/posts/scripting-on-windows/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://naingyeminn.com/posts/scripting-on-windows/</guid>
      <description>Linux နဲ့ပတ်သက်တာတွေပဲရေးဖြစ်တာများတဲ့အတွက် အပြောင်းအလဲလေးဖြစ်အောင် Windows နဲ့ ဖြတ်သန်းခဲ့တဲ့အချိန်တွေတုန်းကအကြောင်းအရာလေးကိုပြန်ပြောပါရစေ။
Unix / Linux မှာတော့ Scripting ဆိုရင် သိပ်ရွေးနေစရာမလိုပါဘူး။ Bash script နဲ့ တော်တော်များများကိုဆောင်ရွက်နိုင်လို့ပါပဲ။ ဒီထက်ပိုလိုအပ်လာမယ်ဆိုရင်လဲ အများအားဖြင့် Python က တပါတည်းပါဝင်ပြီးသားဖြစ်လေ့ရှိတာကြောင့်လွယ်လယ်ကူကူအသုံးပြုနိုင်ပါတယ်။ Windows မှာကျ Batch script ဆိုတာရှိပေမဲ့ တကယ်တမ်းကျ ဘာမှမယ်မယ်ရရ သုံးလို့မရပါဘူး။ ဒါကြောင့် အများအားဖြင့် VBScript ကိုအသုံးပြုရပါတယ်။ VBScript က Windows ရဲ့ လုပ်ဆောင်ချက်တော်တော်များများကို ထိန်းချုပ်လို့ရတဲ့အတွက် အရမ်းကိုသုံးဝင်တဲ့ Scripting language တစ်ခုပါပဲ။ ဘယ်လောက်ထိအောင် အသုံးဝင်ခဲ့လဲဆိုရင် Windows XP ခေတ်မှာ USB Flash Drive တွေကနေကူးတဲ့ Virus တော်တော်များများက VBScript နဲ့ရေးထားတာတွေကို ကြုံခဲ့ရဖူးပါတယ်။ အဲဒီအချိန်တုန်းကတော့ VBScript နဲ့ရေးထားတဲ့ Virus တွေ့ရင်ကို အရမ်းပျော်ခဲ့မိတယ်။ ဘာလို့လဲဆိုတော့ Script တို့ရဲ့ထံုးစံအတိုင်း Binary အနေနဲ့ရှိနေတာမဟုတ်တဲ့အတွက် ရေးထားတဲ့ Coding ကို Text Editor နဲ့ဖွင့်ပြီး လွယ်လွယ်ကူကူလေ့လာလို့ရတာကြောင့်ပါပဲ။ တကူးတကကိုလိုက်စုတယ်။ သူ့ရဲ့ Behavior ကိုကြည့်ပြီး Removal Tool လေးတွေပြန်ရေးတယ်။ များသောအားဖြင့်က Script ကို System32 လိုနေရာမျိုးထဲကူးထည့်ပြီး Windows တက်လာတာနဲ့ အဲ့ဒီ Script ကို Run အောင် Registory ထဲဝင်ရေးထားလေ့ရှိတယ်။ ပြီးရင်တော့ စက်မှာတပ်လိုက်တဲ့ USB Drive တိုင်းရဲ့အထဲကို copy ကူးထည့်တယ်။ Drive ထဲရှိတဲ့ Data တွေကို ဝှက်ပစ်တယ်။ နောက် အခြားစက်မှာသွားတပ်လိုက်တာနဲ့ Drive ထဲကူးထည့်ထားတဲ့ Script ကို အလိုအလျောက် Run အောင် Autorun.</description>
    </item>
    
  </channel>
</rss>